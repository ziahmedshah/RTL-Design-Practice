module counter_32bit (
    input  logic        clk,         // Clock signal
    input  logic        rst,         // Reset signal (active high)
    input  logic        enable,      // Enable signal
    input  logic        up_down,     // 1: Count up, 0: Count down
    input  logic        load,        // Load a new value from `din`
    input  logic [31:0] din,         // New value to load
    input  logic [31:0] sat_value,   // Saturation value for counting up
    input  logic [2:0]  mode,        // Mode selects step size (1 to 8)
    output logic        timer_event, // Event when counter hits limit
    output logic [31:0] count        // Current count value
);

// Step size based on mode
    logic [31:0] step_size;

    // Determine step size (1 to 8 based on mode[2:0])
    always_comb begin
        case (mode)
            3'd0: step_size = 1;
            3'd1: step_size = 2;
            3'd2: step_size = 3;
            3'd3: step_size = 4;
            3'd4: step_size = 5;
            3'd5: step_size = 6;
            3'd6: step_size = 7;
            3'd7: step_size = 8;
            default: step_size = 1;
        endcase
    end

    // Process logic on clock edges
    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            count <= 32'd0;           // Reset counter to 0
            timer_event <= 1'b0;      // Clear timer event
        end
        else if (load) begin
            count <= din;             // Load new value from din
            timer_event <= 1'b0;      // Clear timer event on load
        end
        else if (enable) begin
            if (up_down) begin
                // Count up logic
                if (count + step_size >= sat_value) begin
                    count <= sat_value;  // Clamp at saturation value
                    timer_event <= 1'b1; // Set timer event
                end else begin
                    count <= count + step_size;
                    timer_event <= 1'b0;
                end
            end else begin
                // Count down logic
                if (count < step_size) begin
                    count <= 32'd0;      // Clamp at 0
                    timer_event <= 1'b1; // Set timer event
                end else begin
                    count <= count - step_size;
                    timer_event <= 1'b0;
                end
            end
        end
    end
endmodule
