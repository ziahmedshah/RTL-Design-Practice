{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 `timescale 1ns / 1ps\par
////////////////////////////////////////////////////////////////////////////////\par
// Company: \par
// Engineer: \par
// \par
// Create Date: 18.10.2019 04:10:03\par
// Design Name: \par
// Module Name: CACHE_CONTROLLER\par
// Project Name: \par
// Target Devices: \par
// Tool Versions: \par
// Description: \par
// \par
// Dependencies: \par
// \par
// Revision:\par
// Revision 0.01 - File Created\par
// Additional Comments:\par
// \par
//////////////////////////////////////////////////////////////////////////////////\par
\par
/*******************************************************************\par
While the Stimuation code has been well-commented\par
Here we explain the parameters which were reduced/changed for implementing the project on an FPGA\par
Also other code blocks such as slow clock, 7-segment display are also described\par
The workflow for the code has been well commented and explained in stimulation code and readme\par
*******************************************************************/\par
\par
module CACHE_CONTROLLER(address,clk,data,mode,output_data,hit1, hit2,Wait, clk2,Anode_Activate,seven_seg_out);\par
\par
/********************************/\par
parameter no_of_address_bits=11;  \par
parameter no_of_blkoffset_bits=2;\par
parameter byte_size=4;          //one block is of 4 bits\par
/********************************/\par
parameter no_of_l2_ways=4;      //No. of ways in a set... here 4 as it is 4-way set-associative\par
parameter no_of_l2_ways_bits=2;     //No. of bits to represent ways, 2 bits are sufficient to represent 4 values\par
parameter no_of_l2_blocks=16;       //No. of lines in L2 Cache... each line is a set of 4 blocks here\par
parameter no_of_bytes_l2_block=16;       //No. of bytes in a L2 Cache line= 4* bytes in a block = 4*4=16\par
parameter l2_block_bit_size=64;          // No. of bits in a L2 Cache line = No.of bytes in a line * byte_size=16*4=64\par
parameter no_of_l2_index_bits=4;        // 2^4=16 = No. of L2 block lines.....So 4 bits are used here to get the no. of line on L2 Cache\par
parameter no_of_l2_tag_bits=5;          //No. of tag bits= Address_bits - index_bits- Block_offset = 11 -4 -2 =5\par
/********************************/\par
parameter no_of_l1_blocks=8;        // No. of lines in L1 Cache... as one line contains 1 block...it is equal to no. of blocks\par
parameter no_of_bytes_l1_block=4;       //Each Block has 4 bytes\par
parameter l1_block_bit_size=16;         //Size of each line = No. of blocks in a line * No. of bytes in a block * Byte_size = 1*4*4=16\par
parameter no_of_l1_index_bits=3;        //as 2^3=8... So 3 index bits are sufficient to locate a line on L1 Cache\par
parameter no_of_l1_tag_bits=6;          //No. of tag bits= Address_bits - index_bits- Block_offset = 11 -3 -2 =6\par
/********************************/\par
parameter no_of_main_memory_blocks=32; //2^5 //No. of lines in main_memory... as each line contains a single block... No. of lines=No. of blocks here\par
parameter main_memory_block_size=16;    //Each line has one block... which in turn has 4 bytes and each byte is of 4 bits=1*4*4=16\par
parameter no_of_bytes_main_memory_block=4;   //Each line has one block and each block has 4 bytes\par
parameter main_memory_byte_size=128;        //No. of bytes in main memory=No. of lines* No. of bytes in each line=32*4=128\par
/*************************************/\par
parameter l1_latency=1;         //It represents the delay in fetching a data from L1 Cache...1 here represents that it would be availabe within that clock cycle only\par
parameter l2_latency=2;         //It represents the delay in fetching/searching_time in L2 Cache....It will lead to fetching data after passing of 2 clock cycles\par
parameter main_memory_latency=5;        //It represents the delay in fetching/searching_times in main_memory.. It would lead to fetching data from main memory after passing of 4 clock cycles\par
/*************************************/\par
\par
/*************************************/\par
\par
input [no_of_address_bits-1:0]address;\par
input clk;\par
input [byte_size-1:0]data;\par
input mode;                 //mode=0 : Read     mode=1 : Write\par
output reg[byte_size-1:0]output_data;\par
output reg hit1, hit2;              \par
output reg Wait;            //Wait=1 is a signal for the processor...that the cache controller is currently working on some read/write operation and processor needs to wait before the controller accepts next read/write operation\par
output reg [3:0]Anode_Activate;\par
output reg [6:0]seven_seg_out;        \par
/********************************/\par
\par
reg [no_of_address_bits-1:0]address_valid;          //For Checking whether there is a stored block at some line in Cache or not\par
reg [no_of_address_bits-no_of_blkoffset_bits-1:0]main_memory_blk_id;        //Represents the line number to which the address belongs on main memory\par
reg [no_of_l1_tag_bits-1:0]l1_tag;          //The tag for lines on L1 Cache\par
reg [no_of_l1_index_bits-1:0]l1_index;      //Represents the index of the line to which the address belongs on L1 Cache\par
reg [no_of_l2_tag_bits-1:0]l2_tag;      //Represents the index of the line to which the address belongs on L1 Cache\par
reg [no_of_l2_index_bits-1:0]l2_index;          //The index of the line to which the address belongs on L2 Cache\par
reg [no_of_blkoffset_bits-1:0]offset;           //Offset gives the index of byte within a block\par
\par
/********************************/\par
integer i;                  //integer variables for working in for-loops\par
integer j;\par
/********************************/\par
//the variable given below in various search operation in L1 , L2 and main memory\par
//specially when we need to evict some block from L1 or L2 Cache\par
//then it needs to be searched in the L2 or in main memory to update its value there\par
integer l2_check;\par
integer l2_check2;\par
integer l2_checka;\par
integer l2_check2a;\par
integer l2_mm_check;\par
integer l2_mm_check2;\par
integer l2_mm_iterator;\par
integer l2_iterator;\par
\par
integer l1_l2_check;\par
integer l1_l2_check2;\par
integer l1_l2_checka;\par
integer l1_l2_check2a;\par
integer l1_l2_checkb;\par
integer l1_l2_check2b;\par
/********************************/\par
//Many times we need to evict an block from L1 or L2 Cache..\par
//so its value needs to be updated in L2 or main Memory\par
//these are the variable used for evicting operations\par
//for finding the block present in L1 or L2..its location in L2 or main memory\par
reg [no_of_l2_ways_bits-1:0]lru_value;\par
reg [no_of_l2_ways_bits-1:0]lru_value_dummy;\par
\par
reg [no_of_l2_ways_bits-1:0]lru_value2;\par
reg [no_of_l2_ways_bits-1:0]lru_value_dummy2;\par
\par
reg [no_of_l1_tag_bits-1:0]l1_evict_tag;\par
reg [no_of_l2_tag_bits-1:0]l1_to_l2_tag;\par
reg [no_of_l2_index_bits-1:0]l1_to_l2_index;\par
\par
reg [no_of_l1_tag_bits-1:0]l1_evict_tag2;\par
reg [no_of_l2_tag_bits-1:0]l1_to_l2_tag2;\par
reg [no_of_l2_index_bits-1:0]l1_to_l2_index2;\par
\par
reg [no_of_l1_tag_bits-1:0]l1_evict_tag3;\par
reg [no_of_l2_tag_bits-1:0]l1_to_l2_tag3;\par
reg [no_of_l2_index_bits-1:0]l1_to_l2_index3;\par
\par
reg [no_of_l2_tag_bits-1:0]l2_evict_tag;\par
/********************************/\par
//to store whether the block to be evicted was found in L2 or main memory or not\par
reg l1_to_l2_search;\par
reg l1_to_l2_search2;\par
reg l1_to_l2_search3;\par
/*********************************/\par
//Variables for implementing slow clock for implementation\par
output reg clk2;        //The slow clock signal\par
reg [31:0] counter=0;       //A counter variable to implement slow clock\par
/********************************/\par
//for the delay counters to implement delays in the L2 Cache\par
reg [1:0]l2_delay_counter=0;\par
reg [3:0]main_memory_delay_counter=0;\par
reg dummy_hit;\par
reg is_L2_delay=0;\par
/********************************/\par
//for the delay counters to implement delays in the main memory\par
reg [1:0]l2_delay_counter_w=0;\par
reg [3:0]main_memory_delay_counter_w=0;\par
reg dummy_hit_w=0;\par
reg is_L2_delay_w=0;\par
/************************************/\par
reg [no_of_address_bits-1:0] stored_address;            //for the delay counters to implement delays in the main memorys\par
reg stored_mode;                //for the delay counters to implement delays in the main memory\par
reg [byte_size-1:0]stored_data;         //for the delay counters to implement delays in the main memory\par
reg Ccount=0;               //for the delay counters to implement delays in the main memory\par
\par
//MAIN_MEMORY main_memory_instance();\par
reg [main_memory_block_size-1:0]main_memory[0:no_of_main_memory_blocks-1];\par
initial \par
begin: initialization_main_memory\par
    integer i;\par
    for (i=0;i<no_of_main_memory_blocks;i=i+1)\par
    begin\par
        main_memory[i]=i;\par
    end\par
end\par
\par
//L1_CACHE_MEMORY l1_cache_memory_instance();\par
reg [l1_block_bit_size-1:0]l1_cache_memory[0:no_of_l1_blocks-1];\par
reg [no_of_l1_tag_bits-1:0]l1_tag_array[0:no_of_l1_blocks-1];\par
reg l1_valid[0:no_of_l1_blocks-1];\par
\par
initial \par
begin: initialization_l1\par
    integer i;\par
    for  (i=0;i<no_of_l1_blocks;i=i+1)\par
    begin\par
        l1_valid[i]=1'b0;\par
        l1_tag_array[i]=0;\par
    end\par
end\par
\par
//L2_CACHE_MEMORY l2_cache_memory_instance();\par
reg [l2_block_bit_size-1:0]l2_cache_memory[0:no_of_l2_blocks-1];\par
reg [(no_of_l2_tag_bits*no_of_l2_ways)-1:0]l2_tag_array[0:no_of_l2_blocks-1];\par
reg [no_of_l2_ways-1:0]l2_valid[0:no_of_l2_blocks-1];\par
reg [no_of_l2_ways*no_of_l2_ways_bits-1:0]lru[0:no_of_l2_blocks-1];\par
\par
initial \par
begin: initialization\par
    integer i;\par
    for  (i=0;i<no_of_l2_blocks;i=i+1)\par
    begin\par
        l2_valid[i]=0;\par
        l2_tag_array[i]=0;\par
        lru[i]=8'b11100100;\par
    end\par
end\par
\par
reg [15:0]seg_display_custom_no;            //the cutom number formed by concatenating the 4 BCD numbers for the 4 LEDs\par
reg [3:0] digit_bcd;                        //The BCD for a digit\par
reg [1:0] anode_no;                         //THe high or low for a 7 segment display\par
reg [19:0] refresh;                         //The counter for activating the four 7 segment displays one by one\par
\par
\par
reg [3:0] a1;           //BCD for first 7 segment display           //the leftmost is considered first here\par
reg [3:0] a2;           //BCD for second 7 segment display\par
reg [3:0] a3;           //BCD for third 7 segment display\par
reg [3:0] a4;           //BCD for fourth 7 segment display\par
\par
//always block for implementing slow clock and BCD display\par
always @(posedge clk)\par
begin\par
    //////////////////////////////////////////////////////\par
    a1=(output_data>9)?1:0;             //THe first digit of BCD for output data would be 1 if output data > 9 or 0 otherwise\par
    a2=output_data%10;                  //THe second digit of BCD for output data would be its modulo with 10\par
    a3=(data>9)?1:0;                     //THe first digit of BCD for input data would be 1 if output data > 9 or 0 otherwise\par
    a4=data%10;                              //THe second digit of BCD for input data would be its modulo with 10\par
    seg_display_custom_no=\{a1,a2,a3,a4\};       //Concatenating a1, a2, a3, a4 to get the concatenated BCD number for all four 7 segment displays\par
    refresh <= refresh + 1;                     //increment the refresh counter in every clock\par
    anode_no = refresh[19:18];                  //Take the 2 most significant bits in refresh counter to decide which 7 segment display would be active at that time\par
    case(anode_no)\par
    //Note that the 7 segment displays are active low here\par
    2'b00: begin\par
        Anode_Activate = 4'b0111; \par
        // LED 1 is active and rest three LEDs inactive\par
        digit_bcd = seg_display_custom_no[15:12];\par
        //the 4 digits of the concated number for the specific 7 segment display\par
          end\par
    2'b01: begin\par
        Anode_Activate = 4'b1011; \par
        // LED 2 is active and rest three LEDs inactive\par
        digit_bcd = seg_display_custom_no[11:8];\par
        //the 4 digits of the concated number for the specific 7 segment display\par
          end\par
    2'b10: begin\par
        Anode_Activate = 4'b1101; \par
        // LED 3 is active and rest three LEDs inactive\par
        digit_bcd = seg_display_custom_no[7:4];\par
        //the 4 digits of the concated number for the specific 7 segment display\par
            end\par
    2'b11: begin\par
        Anode_Activate = 4'b1110; \par
        // LED 4 is active and rest three LEDs inactive\par
        digit_bcd = seg_display_custom_no[3:0];\par
        //the 4 digits of the concated number for the specific 7 segment display\par
           end\par
    endcase\par
    //code for getting the 7 segment binary according to the 4 bit BCD\par
    case(digit_bcd)\par
    4'b0000: seven_seg_out=7'b1000000; //0\par
    4'b0001: seven_seg_out=7'b1111001; //1  \par
    4'b0010: seven_seg_out=7'b0100100; //2\par
    4'b0011: seven_seg_out=7'b0110000; //3\par
    4'b0100: seven_seg_out=7'b0011001; //4\par
    4'b0101: seven_seg_out=7'b0010010; //5\par
    4'b0110: seven_seg_out=7'b0000010; //6\par
    4'b0111: seven_seg_out=7'b1111000; //7\par
    4'b1000: seven_seg_out=7'b0000000; //8\par
    4'b1001: seven_seg_out=7'b0010000; //9\par
    endcase\par
    /////////////////////////////////////////////////////\par
    //Slow clock for the FPGA\par
    counter<=counter+1;     //increment the counter in every clk\par
  //   if (counter==150000000)\par
//     begin\par
//         clk2<=~clk2;        //toggle the slow clock and reset the counter...once the counter reaches this value\par
//         counter<=0;         //reset the slow clock counter\par
//     end\par
  if (counter ==2)\par
    clk2<=1'b1;\par
  else if (counter == 4)\par
    begin\par
      clk2<=1'b0;\par
      counter<=0;\par
    end\par
end\par
\par
  always @(posedge clk2)\par
begin\par
    if(Ccount==0 || Wait==0)\par
        begin\par
            stored_address=address;\par
            Ccount=1;\par
            stored_mode=mode;\par
            stored_data=data;\par
        end\par
    main_memory_blk_id=(stored_address>>no_of_blkoffset_bits)%no_of_main_memory_blocks;\par
    l2_index=(main_memory_blk_id)%no_of_l2_blocks;\par
    l2_tag=main_memory_blk_id>>no_of_l2_index_bits;\par
    l1_index=(main_memory_blk_id)%no_of_l1_blocks;\par
    l1_tag=main_memory_blk_id>>no_of_l1_index_bits;\par
    offset=stored_address%no_of_bytes_main_memory_block;\par
    if (stored_mode==0)\par
    begin\par
//         $display("Check Started");\par
        /************************************************************************************************************************************/\par
        if (l1_valid[l1_index]&&l1_tag_array[l1_index]==l1_tag)\par
        begin\par
//             $display("Found in L1 Cache");\par
            output_data=l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size];\par
            hit1=1;\par
            hit2=0;\par
            Wait=0;\par
        end\par
        /************************************************************************************************************************************/\par
        else\par
        begin\par
            /************************************************************************************************************************************/\par
//             $display("Not Found in L1 Cache");\par
            hit1=0;\par
            if (l2_delay_counter<l2_latency && is_L2_delay==0)\par
            begin\par
                hit2=0;\par
                hit1=0;\par
                l2_delay_counter = l2_delay_counter+1;\par
                Wait=1;\par
            end\par
            else\par
            begin //c not found in l1\par
                l2_delay_counter=0;\par
                hit1=0;\par
                hit2=1;\par
                Wait=0;\par
                dummy_hit=0;\par
                for (l2_check=0;l2_check<no_of_l2_ways;l2_check=l2_check+1)\par
                begin\par
                    if (l2_valid[l2_index][l2_check]&&l2_tag_array[l2_index][((l2_check+1)*no_of_l2_tag_bits-1)-:no_of_l2_tag_bits]==l2_tag)\par
                    begin\par
                        dummy_hit=1;\par
                        l2_check2=l2_check;\par
                    end\par
                end\par
//                 if (dummy_hit==1) $display("Found in L2 Cache");\par
//                 else $display("Not Found in L2 Cache");\par
                if (dummy_hit==1)\par
                begin\par
                    lru_value2=lru[l2_index][((l2_check2+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits];\par
                    for (l2_iterator=0;l2_iterator<no_of_l2_ways;l2_iterator=l2_iterator+1)\par
                    begin\par
                       lru_value_dummy2=lru[l2_index][((l2_iterator+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits];\par
                       if (lru_value_dummy2>lru_value2)\par
                       begin\par
                           lru[l2_index][((l2_iterator+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits]=lru_value_dummy2-1;\par
                       end\par
                    end\par
                    lru[l2_index][((l2_check2+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits]=no_of_l2_ways-1;\par
                    \par
                    if (l1_valid[l1_index]==0)\par
                    begin\par
                        l1_cache_memory[l1_index]=l2_cache_memory[l2_index][((l2_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size];\par
                        l1_valid[l1_index]=1;\par
                        l1_tag_array[l1_index]=l1_tag;\par
                        output_data=l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size];\par
                        dummy_hit=1;\par
                    end\par
                    else\par
                    begin\par
                        l1_evict_tag2=l1_tag_array[l1_index];\par
                        l1_to_l2_tag2=l1_evict_tag2>>(no_of_l1_tag_bits-no_of_l2_tag_bits);\par
                        l1_to_l2_index2=\{l1_evict_tag2[no_of_l1_tag_bits-no_of_l2_tag_bits-1:0],l1_index\};\par
                        l1_to_l2_search2=0;\par
                        for (l1_l2_checka=0;l1_l2_checka<no_of_l2_ways;l1_l2_checka=l1_l2_checka+1)\par
                        begin\par
                            if (l2_valid[l1_to_l2_index2][l1_l2_checka]&&l2_tag_array[l1_to_l2_index2][((l1_l2_checka+1)*no_of_l2_tag_bits-1)-:no_of_l2_tag_bits]==l1_to_l2_tag2)\par
                            begin\par
                                l1_to_l2_search2=1;\par
                                l1_l2_check2a=l1_l2_checka;\par
                            end\par
                        end\par
                        if (l1_to_l2_search2==1)\par
                        begin\par
                            //$display("found l1 eviction in l2");\par
                            l2_cache_memory[l1_to_l2_index2][((l1_l2_check2a+1)*l1_block_bit_size-1)-:l1_block_bit_size]=l1_cache_memory[l1_index];\par
                            //$display("%B",l2_cache_memory[l1_to_l2_index][((l1_l2_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size]);\par
                            l1_cache_memory[l1_index]=l2_cache_memory[l2_index][((l2_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size];\par
                            //$display("%B",l1_cache_memory[l1_index]);\par
                            l1_valid[l1_index]=1;\par
                            l1_tag_array[l1_index]=l1_tag;\par
                            //$display("%B",l1_tag_array[l1_index]);\par
                            output_data=l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size];\par
                            dummy_hit=1;\par
                        end\par
                        else\par
                        begin\par
                            main_memory[\{l1_evict_tag2,l1_index\}]=l1_cache_memory[l1_index];\par
                            l1_cache_memory[l1_index]=l2_cache_memory[l2_index][((l2_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size];\par
                            //$display("%B",l1_cache_memory[l1_index]);\par
                            l1_valid[l1_index]=1;\par
                            l1_tag_array[l1_index]=l1_tag;\par
                            //$display("%B",l1_tag_array[l1_index]);\par
                            output_data=l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size];\par
                            dummy_hit=1;\par
                        end\par
                    end\par
                end\par
                /************************************************************************************************************************************/\par
                else\par
                begin //a not found in l2\par
                    hit1=0;\par
                    hit2=0;\par
                    Wait=1;\par
                    /************************************************************************************************************************************/\par
//                     $display("Not found in L2 cache, Extracting from main memory");\par
                    \par
                    if (main_memory_delay_counter<main_memory_latency)\par
                    begin\par
                        hit1=0;\par
                        hit2=0;\par
                        main_memory_delay_counter = main_memory_delay_counter+1;\par
                        Wait=1;\par
                        is_L2_delay=1;\par
                    end\par
                    else\par
                    begin //d\par
                        main_memory_delay_counter=0;\par
                        is_L2_delay=0;\par
                        hit1=0;\par
                        hit2=0;\par
                        Wait=0;\par
                        l2_delay_counter=0;\par
                        main_memory_delay_counter=0;\par
                        for (l2_mm_check=0;l2_mm_check<no_of_l2_ways;l2_mm_check=l2_mm_check+1)\par
                        begin\par
                            if (lru[l2_index][((l2_mm_check+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits]==0)\par
                            begin\par
                                l2_mm_check2=l2_mm_check;\par
                            end\par
                        end\par
//                         $display("%D",l2_mm_check2);\par
                        lru_value=lru[l2_index][((l2_mm_check2+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits];\par
                        //$display("%D",lru_value);\par
                        for (l2_mm_iterator=0;l2_mm_iterator<no_of_l2_ways;l2_mm_iterator=l2_mm_iterator+1)\par
                        begin\par
                            //$display("Initial");\par
                            lru_value_dummy=lru[l2_index][((l2_mm_iterator+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits];\par
                            //$display("%D",lru_value_dummy);\par
                           if ((lru[l2_index][((l2_mm_iterator+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits])>lru_value)\par
                           begin\par
                               //$display("bigger");\par
                               lru[l2_index][((l2_mm_iterator+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits]=lru_value_dummy-1;\par
                               lru_value_dummy=lru[l2_index][((l2_mm_iterator+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits];\par
                               //$display("%D",lru_value_dummy);\par
                           end\par
                        end\par
                        lru[l2_index][((l2_mm_check2+1)*no_of_l2_ways_bits-1)-:no_of_l2_ways_bits]=(no_of_l2_ways-1);\par
//                         $display("%D",lru[l2_index]);\par
                        \par
                        if (l2_valid[l2_index][l2_mm_check2]==0)\par
                        begin\par
//                             $display("Initially not present in l2");\par
                            l2_cache_memory[l2_index][((l2_mm_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size]=main_memory[main_memory_blk_id];\par
//                             $display("%B",l2_cache_memory[l2_index][((l2_mm_check2+1)*byte_size-1)-:byte_size]);\par
                            l2_valid[l2_index][l2_mm_check2]=1;\par
//                             $display("%B",l2_valid[l2_index][l2_mm_check2]);\par
                            l2_tag_array[l2_index][((l2_mm_check2+1)*no_of_l2_tag_bits-1)-:no_of_l2_tag_bits]=l2_tag;\par
//                             $display("%B",l2_tag_array[l2_index][((l2_mm_check2+1)*no_of_l2_tag_bits-1)-:no_of_l2_tag_bits]);\par
                            ///\par
                            if (l1_valid[l1_index]==0)\par
                            begin\par
//                                 $display("Initially not present in l1");\par
                                l1_cache_memory[l1_index]=main_memory[main_memory_blk_id];\par
//                                 $display("%B",l1_cache_memory[l1_index]);\par
                                l1_valid[l1_index]=1;\par
//                                 $display("%B",l1_valid[l1_index]);\par
                                l1_tag_array[l1_index]=l1_tag;\par
//                                 $display("%B",l1_tag_array[l1_index]);\par
                                output_data=l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size];\par
                                dummy_hit=0; \par
                            end\par
                            else\par
                            begin\par
//                                 $display("Initially present in l1");\par
                                l1_evict_tag=l1_tag_array[l1_index];\par
//                                 $display("%B",l1_evict_tag);\par
                                l1_to_l2_tag=l1_evict_tag>>(no_of_l1_tag_bits-no_of_l2_tag_bits);\par
//                                 $display("%B",l1_to_l2_tag);\par
                                l1_to_l2_index=\{l1_evict_tag[no_of_l1_tag_bits-no_of_l2_tag_bits-1:0],l1_index\};\par
//                                 $display("%B",l1_to_l2_index);\par
                                l1_to_l2_search=0;\par
                                for (l1_l2_check=0;l1_l2_check<no_of_l2_ways;l1_l2_check=l1_l2_check+1)\par
                                begin\par
                                    if (l2_valid[l1_to_l2_index][l1_l2_check]&&l2_tag_array[l1_to_l2_index][((l1_l2_check+1)*no_of_l2_tag_bits-1)-:no_of_l2_tag_bits]==l1_to_l2_tag)\par
                                    begin\par
                                        l1_to_l2_search=1;\par
                                        l1_l2_check2=l1_l2_check;\par
                                    end\par
                                end\par
                                if (l1_to_l2_search==1)\par
                                begin\par
//                                     $display("found l1 eviction in l2");\par
                                    l2_cache_memory[l1_to_l2_index][((l1_l2_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size]=l1_cache_memory[l1_index];\par
//                                     $display("%B",l2_cache_memory[l1_to_l2_index][((l1_l2_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size]);\par
                                    l1_cache_memory[l1_index]=l2_cache_memory[l2_index][((l2_mm_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size];\par
//                                     $display("%B",l1_cache_memory[l1_index]);\par
                                    l1_valid[l1_index]=1;\par
                                    l1_tag_array[l1_index]=l1_tag;\par
//                                     $display("%B",l1_tag_array[l1_index]);\par
                                    output_data=l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size];\par
                                    dummy_hit=0;\par
                                end\par
                                else\par
                                begin\par
                                    main_memory[\{l1_evict_tag,l1_index\}]=l1_cache_memory[l1_index];\par
                                    l1_cache_memory[l1_index]=l2_cache_memory[l2_index][((l2_mm_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size];\par
//                                     $display("%B",l1_cache_memory[l1_index]);\par
                                    l1_valid[l1_index]=1;\par
                                    l1_tag_array[l1_index]=l1_tag;\par
//                                     $display("%B",l1_tag_array[l1_index]);\par
                                    output_data=l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size];\par
                                    dummy_hit=0;\par
                                end\par
                            end\par
                        end\par
                        /************************************************************************************************************************************/\par
                        else\par
                        begin\par
                            /************************************************************************************************************************************/\par
//                             $display("Initially valid data present in l2");\par
                            l2_evict_tag=l2_tag_array[l2_index][((l2_mm_check2+1)*no_of_l2_tag_bits-1)-:no_of_l2_tag_bits];\par
                            main_memory[\{l2_evict_tag,l2_index\}]=l2_cache_memory[l2_index][((l2_mm_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size];\par
                            \par
                            l2_cache_memory[l2_index][((l2_mm_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size]=main_memory[main_memory_blk_id];\par
                            l2_valid[l2_index][l2_mm_check2]=1;\par
                            l2_tag_array[l2_index][((l2_mm_check2+1)*no_of_l2_tag_bits-1)-:no_of_l2_tag_bits]=l2_tag;\par
                            /************************************************************************************************************************************/\par
                            \par
                            if (l1_valid[l1_index]==0)\par
                            begin\par
                                l1_cache_memory[l1_index]=l2_cache_memory[l2_index][((l2_mm_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size];\par
                                l1_valid[l1_index]=1;\par
                                l1_tag_array[l1_index]=l1_tag;\par
                                output_data=l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size];\par
                                dummy_hit=0;\par
                            end\par
                            else\par
                            begin\par
                                l1_evict_tag3=l1_tag_array[l1_index];\par
                                l1_to_l2_tag3=l1_evict_tag3>>(no_of_l1_tag_bits-no_of_l2_tag_bits);\par
                                l1_to_l2_index3=\{l1_evict_tag3[no_of_l1_tag_bits-no_of_l2_tag_bits-1:0],l1_index\};\par
                                l1_to_l2_search3=0;\par
                                for (l1_l2_checkb=0;l1_l2_checkb<no_of_l2_ways;l1_l2_checkb=l1_l2_checkb+1)\par
                                begin\par
                                    if (l2_valid[l1_to_l2_index3][l1_l2_checkb]&&l2_tag_array[l1_to_l2_index3][((l1_l2_checkb+1)*no_of_l2_tag_bits-1)-:no_of_l2_tag_bits]==l1_to_l2_tag3)\par
                                    begin\par
                                        l1_to_l2_search3=1;\par
                                        l1_l2_check2b=l1_l2_checkb;\par
                                    end\par
                                end\par
                                if (l1_to_l2_search3==1)\par
                                begin\par
                                    //$display("found l1 eviction in l2");\par
                                    l2_cache_memory[l1_to_l2_index3][((l1_l2_check2b+1)*l1_block_bit_size-1)-:l1_block_bit_size]=l1_cache_memory[l1_index];\par
                                    //$display("%B",l2_cache_memory[l1_to_l2_index][((l1_l2_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size]);\par
                                    l1_cache_memory[l1_index]=l2_cache_memory[l2_index][((l2_mm_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size];\par
                                    //$display("%B",l1_cache_memory[l1_index]);\par
                                    l1_valid[l1_index]=1;\par
                                    l1_tag_array[l1_index]=l1_tag;\par
                                    //$display("%B",l1_tag_array[l1_index]);\par
                                    output_data=l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size];\par
                                    dummy_hit=0;\par
                                end\par
                                else\par
                                begin\par
                                    main_memory[\{l1_evict_tag3,l1_index\}]=l1_cache_memory[l1_index];\par
                                    l1_cache_memory[l1_index]=l2_cache_memory[l2_index][((l2_mm_check2+1)*l1_block_bit_size-1)-:l1_block_bit_size];\par
                                    //$display("%B",l1_cache_memory[l1_index]);\par
                                    l1_valid[l1_index]=1;\par
                                    l1_tag_array[l1_index]=l1_tag;\par
                                    //$display("%B",l1_tag_array[l1_index]);\par
                                    output_data=l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size];\par
                                    dummy_hit=0;\par
                                end\par
                            end\par
                        end\par
                    end    \par
                end //a.\par
            end //c.      \par
        end\par
    end\par
    else\par
    begin\par
        output_data=0;\par
        if (l1_valid[l1_index]&& l1_tag_array[l1_index]==l1_tag)\par
        begin\par
            //$display("Found in L1 Cache");\par
            l1_cache_memory[l1_index][((offset+1)*byte_size-1)-:byte_size]=stored_data;\par
            Wait=0;\par
            hit1=1;\par
            hit2=0;\par
        end\par
        else\par
        begin  /*else not found in L1 starts here*/\par
            if((l2_delay_counter_w < l2_latency) && is_L2_delay_w==0)\par
            begin \par
                l2_delay_counter_w=l2_delay_counter_w+1;\par
                hit1=0;\par
                hit2=0;\par
                Wait=1;\par
            end\par
            else\par
            begin /*searching in L2 and main memory starts here */\par
                l2_delay_counter_w=0;\par
                dummy_hit_w=0;\par
                hit1=0;\par
                hit2=0;\par
                for (l2_checka=0;l2_checka<no_of_l2_ways;l2_checka=l2_checka+1)\par
                begin\par
                    if (l2_valid[l2_index][l2_checka]&&l2_tag_array[l2_index][((l2_checka+1)*no_of_l2_tag_bits-1)-:no_of_l2_tag_bits]==l2_tag)\par
                    begin\par
                        dummy_hit_w=1;\par
                        hit2=1;\par
                        hit1=0;\par
                        Wait=0;\par
                        l2_cache_memory[l2_index][(l2_checka*l1_block_bit_size+(offset+1)*byte_size-1)-:byte_size]=stored_data;\par
                    end\par
                end\par
                if (dummy_hit_w==0) \par
                begin\par
                    hit1=0;\par
                    hit2=0;\par
                    if(main_memory_delay_counter_w < main_memory_latency)\par
                    begin\par
                        main_memory_delay_counter_w=main_memory_delay_counter_w+1;\par
                        hit1=0;\par
                        hit2=0;\par
                        Wait=1;\par
                        is_L2_delay_w=1;\par
                    end\par
                    else\par
                    begin\par
                        main_memory_delay_counter_w=0;\par
                        hit1=0;\par
                        hit2=0;\par
                        Wait=0;\par
                        is_L2_delay_w=0;\par
                        main_memory[main_memory_blk_id][((offset+1)*byte_size-1)-:byte_size]=stored_data;\par
                    end\par
                end\par
            end /*searching in L2 and Main ends here */\par
        end    /*else not found in L1 ends here*/\par
    end\par
end\par
endmodule\par
}
 